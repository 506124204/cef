diff --git content/browser/storage_partition_impl.cc content/browser/storage_partition_impl.cc
index f06c5b512342..ba2c1eae9324 100644
--- content/browser/storage_partition_impl.cc
+++ content/browser/storage_partition_impl.cc
@@ -489,10 +489,6 @@ class LoginHandlerDelegate {
     }
 
     WebContents* web_contents = web_contents_getter_.Run();
-    if (!web_contents) {
-      OnAuthCredentials(base::nullopt);
-      return;
-    }
 
     // WeakPtr is not strictly necessary here due to OnRequestCancelled.
     creating_login_delegate_ = true;
@@ -549,12 +545,6 @@ void OnAuthRequiredContinuation(
     web_contents_getter =
         base::BindRepeating(GetWebContents, process_id, routing_id);
   }
-  if (!web_contents_getter.Run()) {
-    mojo::Remote<network::mojom::AuthChallengeResponder>
-        auth_challenge_responder_remote(std::move(auth_challenge_responder));
-    auth_challenge_responder_remote->OnAuthCredentials(base::nullopt);
-    return;
-  }
   new LoginHandlerDelegate(std::move(auth_challenge_responder),
                            std::move(web_contents_getter), auth_info,
                            is_request_for_main_frame, process_id, routing_id,
@@ -2363,8 +2353,12 @@ void StoragePartitionImpl::GetQuotaSettings(
     return;
   }
 
+  // CEF always returns false for IsOffTheRecord(), so also check the path.
+  const bool is_incognito = browser_context_->IsOffTheRecord() ||
+                            browser_context_->GetPath().empty();
+
   storage::GetNominalDynamicSettings(
-      GetPath(), browser_context_->IsOffTheRecord(),
+      GetPath(), is_incognito,
       storage::GetDefaultDeviceInfoHelper(), std::move(callback));
 }
 
@@ -2376,6 +2370,11 @@ void StoragePartitionImpl::InitNetworkContext() {
   GetContentClient()->browser()->ConfigureNetworkContextParams(
       browser_context_, is_in_memory_, relative_partition_path_,
       context_params.get(), cert_verifier_creation_params.get());
+  if (context_params->context_name &&
+      *context_params->context_name == "magic_shutting_down") {
+    // Don't re-initialize the network context during shutdown.
+    return;
+  }
   DCHECK(!context_params->cert_verifier_creation_params)
       << "|cert_verifier_creation_params| should not be set in the "
          "NetworkContextParams, as they will eventually be removed when the "
